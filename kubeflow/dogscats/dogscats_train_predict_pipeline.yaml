apiVersion: argoproj.io/v1alpha1
kind: Workflow
metadata:
  generateName: dogsctas-train-predict-pipeline-
  annotations: {pipelines.kubeflow.org/kfp_sdk_version: 1.8.12, pipelines.kubeflow.org/pipeline_compilation_time: '2023-03-16T20:13:07.211016',
    pipelines.kubeflow.org/pipeline_spec: '{"name": "Dogsctas train predict pipeline"}'}
  labels: {pipelines.kubeflow.org/kfp_sdk_version: 1.8.12}
spec:
  entrypoint: dogsctas-train-predict-pipeline
  templates:
  - name: dogscats-predict-pipeline
    container:
      args: [--MAPPED-PATH, data]
      command:
      - sh
      - -ec
      - |
        program_path=$(mktemp)
        printf "%s" "$0" > "$program_path"
        python3 -u "$program_path" "$@"
      - |
        def dogscats_predict_pipeline(MAPPED_PATH):
            from keras.models import load_model

            from keras.preprocessing import image
            from keras.utils import load_img, img_to_array
            import matplotlib.pyplot as plt
            import matplotlib.image as mpimg
            import numpy as np
            import os
            import pathlib

            # map to external drive
            # MAPPED_PATH = os.getenv("MAPPED_PATH", default="./data")
            data_root_path = pathlib.Path(MAPPED_PATH)
            TRAIN_DATA_DIR = f"{data_root_path}/training_set"
            VALIDATION_DATA_DIR = f"{data_root_path}/test_set"
            training_information_dir = f"{data_root_path}/training_information"
            single_prediction_dir = f"{data_root_path}/single_prediction"

            model_name = "MobileNetVDogsCats"
            models_dir = f"{data_root_path}/models"
            model_path = f"{models_dir}/{model_name}.h5"

            TRAIN_SAMPLES = 500
            VALIDATION_SAMPLES = 500
            NUM_CLASSES = 2
            IMG_WIDTH, IMG_HEIGHT = 224, 224
            BATCH_SIZE = 64

            model = load_model(model_path)

            def get_image(img_path):
                img = load_img(img_path, target_size=(IMG_WIDTH, IMG_HEIGHT))
                return img

            def predictImage(image_name):
                img = get_image(f"{single_prediction_dir}/{image_name}")
                img_array = img_to_array(img)
                expanded_img_array = img_array.reshape(-1, 224, 224, 3)
                preprocessed_img = expanded_img_array / 255.
                prediction = model.predict(preprocessed_img)
                print(prediction)
                print("{'cats': 0, 'dogs': 1}")

            predictImage("cat_or_dog_1.jpg")
            predictImage("cat_or_dog_2.jpg")

        import argparse
        _parser = argparse.ArgumentParser(prog='Dogscats predict pipeline', description='')
        _parser.add_argument("--MAPPED-PATH", dest="MAPPED_PATH", type=str, required=True, default=argparse.SUPPRESS)
        _parsed_args = vars(_parser.parse_args())

        _outputs = dogscats_predict_pipeline(**_parsed_args)
      image: python:3.7
    metadata:
      labels:
        pipelines.kubeflow.org/kfp_sdk_version: 1.8.12
        pipelines.kubeflow.org/pipeline-sdk-type: kfp
        pipelines.kubeflow.org/enable_caching: "true"
      annotations: {pipelines.kubeflow.org/component_spec: '{"implementation": {"container":
          {"args": ["--MAPPED-PATH", {"inputValue": "MAPPED_PATH"}], "command": ["sh",
          "-ec", "program_path=$(mktemp)\nprintf \"%s\" \"$0\" > \"$program_path\"\npython3
          -u \"$program_path\" \"$@\"\n", "def dogscats_predict_pipeline(MAPPED_PATH):\n    from
          keras.models import load_model\n\n    from keras.preprocessing import image\n    from
          keras.utils import load_img, img_to_array\n    import matplotlib.pyplot
          as plt\n    import matplotlib.image as mpimg\n    import numpy as np\n    import
          os\n    import pathlib\n\n    # map to external drive\n    # MAPPED_PATH
          = os.getenv(\"MAPPED_PATH\", default=\"./data\")\n    data_root_path = pathlib.Path(MAPPED_PATH)\n    TRAIN_DATA_DIR
          = f\"{data_root_path}/training_set\"\n    VALIDATION_DATA_DIR = f\"{data_root_path}/test_set\"\n    training_information_dir
          = f\"{data_root_path}/training_information\"\n    single_prediction_dir
          = f\"{data_root_path}/single_prediction\"\n\n    model_name = \"MobileNetVDogsCats\"\n    models_dir
          = f\"{data_root_path}/models\"\n    model_path = f\"{models_dir}/{model_name}.h5\"\n\n    TRAIN_SAMPLES
          = 500\n    VALIDATION_SAMPLES = 500\n    NUM_CLASSES = 2\n    IMG_WIDTH,
          IMG_HEIGHT = 224, 224\n    BATCH_SIZE = 64\n\n    model = load_model(model_path)\n\n    def
          get_image(img_path):\n        img = load_img(img_path, target_size=(IMG_WIDTH,
          IMG_HEIGHT))\n        return img\n\n    def predictImage(image_name):\n        img
          = get_image(f\"{single_prediction_dir}/{image_name}\")\n        img_array
          = img_to_array(img)\n        expanded_img_array = img_array.reshape(-1,
          224, 224, 3)\n        preprocessed_img = expanded_img_array / 255.\n        prediction
          = model.predict(preprocessed_img)\n        print(prediction)\n        print(\"{''cats'':
          0, ''dogs'': 1}\")\n\n    predictImage(\"cat_or_dog_1.jpg\")\n    predictImage(\"cat_or_dog_2.jpg\")\n\nimport
          argparse\n_parser = argparse.ArgumentParser(prog=''Dogscats predict pipeline'',
          description='''')\n_parser.add_argument(\"--MAPPED-PATH\", dest=\"MAPPED_PATH\",
          type=str, required=True, default=argparse.SUPPRESS)\n_parsed_args = vars(_parser.parse_args())\n\n_outputs
          = dogscats_predict_pipeline(**_parsed_args)\n"], "image": "python:3.7"}},
          "inputs": [{"name": "MAPPED_PATH", "type": "String"}], "name": "Dogscats
          predict pipeline"}', pipelines.kubeflow.org/component_ref: '{}', pipelines.kubeflow.org/arguments.parameters: '{"MAPPED_PATH":
          "data"}'}
  - name: dogsctas-train-predict-pipeline
    dag:
      tasks:
      - {name: dogscats-predict-pipeline, template: dogscats-predict-pipeline}
      - {name: visiondemo2-dogscats, template: visiondemo2-dogscats}
  - name: visiondemo2-dogscats
    container:
      args: []
      command: [python3, train.py]
      image: duplocloud/anyservice:visiondemo2-train-cpu-v1
    metadata:
      labels:
        pipelines.kubeflow.org/kfp_sdk_version: 1.8.12
        pipelines.kubeflow.org/pipeline-sdk-type: kfp
        pipelines.kubeflow.org/enable_caching: "true"
      annotations: {pipelines.kubeflow.org/component_spec: '{"description": "visiondemo2-dogscats",
          "implementation": {"container": {"command": ["python3", "train.py"], "image":
          "duplocloud/anyservice:visiondemo2-train-cpu-v1"}}, "name": "visiondemo2-dogscats"}',
        pipelines.kubeflow.org/component_ref: '{"digest": "761f246e97e86cdba64061cd6d93aae9b863feb641e65e6ccc2bc329163bca52",
          "url": "component.yaml"}'}
  arguments:
    parameters: []
  serviceAccountName: pipeline-runner
