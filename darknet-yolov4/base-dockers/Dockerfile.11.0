FROM nvidia/cuda:11.0-cudnn8-devel-ubuntu18.04

# docker build -t  duplocloud/cuda:11.0-cdnn8-ubuntu18.04-v3 .

ARG DEBIAN_FRONTEND=noninteractive
ENV LC_ALL=C.UTF-8
ENV LANG=C.UTF-8

ENV CODE_PATH=/opt/ml/code
ENV MODEL_PATH=/opt/ml/model
ENV INPUT_PATH=/opt/ml/input


RUN mkdir -p /opt/ml/code
RUN mkdir -p /opt/ml/model/backup
RUN mkdir -p /opt/ml/input/data/custom_data


RUN apt update
RUN apt install -y \
    wget git vim curl zip  jq net-tools \
    pkg-config  build-essential cmake autoconf automake \
    clang-format  apt-utils \
    checkinstall libtool  yasm gnupg-agent \
    apt-transport-https  ca-certificates software-properties-common libopencv-dev

RUN apt-get clean autoclean
RUN apt-get autoremove --yes
RUN apt-get clean
############################################
RUN apt-get update && apt-get install -y python3  python3-pip
RUN pip3 install scikit-build
RUN pip3 install --upgrade cython
RUN pip3 install --upgrade cython
RUN pip3 install opencv-python
RUN  python3 --version
############################################
############################################
# Get OpenCV dependencies
RUN apt-get update && apt-get install -y \
    gfortran libjpeg8-dev libtiff5-dev libavcodec-dev libavformat-dev \
    libswscale-dev libdc1394-22-dev libxine2-dev libv4l-dev \
    qt5-default libgtk2.0-dev libtbb-dev libatlas-base-dev \
    libfaac-dev libmp3lame-dev libtheora-dev libvorbis-dev libxvidcore-dev libopencore-amrnb-dev \
    libopencore-amrwb-dev x264 v4l-utils libprotobuf-dev protobuf-compiler libgoogle-glog-dev \
    libgflags-dev libgphoto2-dev
RUN apt-get clean autoclean
RUN apt-get autoremove --yes
RUN apt-get clean
############################################
# build darknet
WORKDIR /opt/ml/code
RUN git clone https://github.com/AlexeyAB/darknet.git ./
#RUN make OPENCV=1 GPU=1 AVX=1 OPENMP=1 CUDNN=1 CUDNN_HALF=0 OPENMP=1 -j $(nproc)
#RUN make   GPU=1   CUDNN=1 OPENCV=1
RUN make OPENCV=1 GPU=1 AVX=1 OPENMP=1 CUDNN=1 CUDNN_HALF=0 OPENMP=1 LIBSO=1 -j $(nproc)
RUN chmod +x darknet
############################################

######
# build opencv
RUN cd /opt && git clone --verbose https://github.com/opencv/opencv.git -b 4.4.0 &&\
    cd /opt && wget https://github.com/opencv/opencv_contrib/archive/4.4.0.tar.gz &&\
    mkdir opencv_contrib && tar -xf 4.4.0.tar.gz -C opencv_contrib --strip-components 1
RUN cd /opt/opencv && mkdir release && cd release && \
         cmake -G "Unix Makefiles" \
        -DENABLE_PRECOMPILED_HEADERS=OFF \
        -DCMAKE_CXX_COMPILER=/usr/bin/g++ \
        -DCMAKE_C_COMPILER=/usr/bin/gcc \
        -DCMAKE_BUILD_TYPE=RELEASE \
        -DCMAKE_INSTALL_PREFIX=/usr/local \
        -DWITH_TBB=ON \
        -DBUILD_NEW_PYTHON_SUPPORT=ON \
        -DWITH_V4L=ON \
        -DINSTALL_C_EXAMPLES=OFF \
        -DINSTALL_PYTHON_EXAMPLES=ON \
        -DBUILD_EXAMPLES=OFF \
        -DWITH_QT=ON \
        -DWITH_OPENGL=ON \
        -DWITH_CUDA=ON \
        -DWITH_CUDNN=ON \
        -DCUDA_ARCH_BIN=70 \
        -DOPENCV_DNN_CUDA=ON \
        -DCUDA_GENERATION=Auto \
        -DOPENCV_EXTRA_MODULES_PATH=../../opencv_contrib/modules \
        .. &&\
        make -j"$(nproc)"  && \
        make install && \
        ldconfig &&\
        cd /opt/opencv/release && make clean

########## moved to base #####
RUN pip3 install sagemaker-containers
##########
ENV RUSTUP_HOME=/usr/local/rustup
ENV CARGO_HOME=/usr/local/cargo
ENV PATH=/usr/local/cargo/bin:$PATH:$HOME/.cargo/bin
RUN set -eux; \
    url="https://static.rust-lang.org/rustup/dist/x86_64-unknown-linux-gnu/rustup-init"; \
    wget "$url"; \
    chmod +x rustup-init; \
    ./rustup-init -y --no-modify-path --default-toolchain nightly; \
    rm rustup-init; \
    chmod -R a+w $RUSTUP_HOME $CARGO_HOME;
RUN  rustup --version;
RUN  cargo --version;
RUN  rustc --version;

RUN apt update -y; apt-get install -y clang
RUN pip3 install darknetpy
########## moved to base #####

###########################################
RUN pip3 list
COPY ./requirements.txt .
RUN  python3 --version
RUN pip3 install -r requirements.txt
###########################################


######
# check : reduce docker size ?
#RUN df -h
#RUN du -h -d 1 /opt
######
RUN apt-get clean autoclean
RUN apt-get autoremove --yes
RUN rm -rf /var/lib/{apt,dpkg,cache,log}/
RUN rm -rf /var/lib/apt/lists/*
RUN touch /tmp/aa
#RUN rm -rf /tmp/*
#RUN pip cache purge
###########################################
#######
# check : reduce docker size ?
#RUN du -h -d 1 /opt
#RUN du -h -d 1 ~/.
#######

################
RUN pip3 list
###########################################
RUN ls /opt/ml/code/
WORKDIR /opt/ml/code
ENV LIBRARY_PATH ./:/usr/local/lib:$LIBRARY_PATH
#keep the relevent one below
ENV LD_LIBRARY_PATH=/usr/local/cuda-10.1/targets/x86_64-linux/lib/:/usr/local/cuda-10.1/compat/:$LD_LIBRARY_PATH
ENV LD_LIBRARY_PATH=/usr/local/cuda-11.1.1/targets/x86_64-linux/lib/:/usr/local/cuda-11.1.1/compat/:$LD_LIBRARY_PATH
ENV LD_LIBRARY_PATH=/usr/local/cuda-11.0/targets/x86_64-linux/lib/:/usr/local/cuda-11.0/compat/:$LD_LIBRARY_PATH
ENV LD_LIBRARY_PATH=/usr/local/cuda-10.2/targets/x86_64-linux/lib/:/usr/local/cuda-10.2/compat/:$LD_LIBRARY_PATH
#COPY *.sh /opt/ml/code/
#COPY *.py /opt/ml/code/
#RUN chmod 777 *.sh
######

